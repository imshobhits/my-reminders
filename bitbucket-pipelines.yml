# This is a sample build configuration for JavaScript.
# Check our guides at https://confluence.atlassian.com/x/14UWN for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image: haskell:8.6.5

options:
  size: 2x

definitions:
  services:
    docker:
      memory: 4096
  caches:
    stack-home: ~/.stack

pipelines:
  default:
    - parallel:
      - step:
          name: Backend Build and Test
          image: haskell:8.10.4
          caches:
            - stack-home
          script:
            - (apt-get update || true) && apt-get install -y libpq-dev pkgconf
            - mkdir -p frontend/build && echo "{}" > frontend/build/asset-manifest.json
            - stack build -j4 --test
      - step:
          name: Frontend Build
          caches:
            - node
          image: node:14
          script:
            - apt-get update && apt-get install -y openjdk-11-jre-headless
            - cd frontend
            - yarn && yarn build
  branches:
    master:
      - step:
          name: Build docker image
          script:
            # set up step variables and auth data
            - export DOCKER_URL="docker-proxy.services.atlassian.com"
            - docker login -u=sox -p=$PIPELINES_JWT_TOKEN docker-proxy.services.atlassian.com
            # build base image (node@alpine + python dependencies + hugo)
            - docker build --tag="${DOCKER_URL}/sox/atlassian/my-reminders:${BITBUCKET_BUILD_NUMBER}" .
            - docker push "${DOCKER_URL}/sox/atlassian/my-reminders:${BITBUCKET_BUILD_NUMBER}"
          services:
            - docker
          caches:
            - docker
      - step:
          name: Deploy to staging
          deployment: staging
          image: node:latest
          script:
            # set up step variables and auth data
            - export DOCKER_URL="docker-proxy.services.atlassian.com"
            - export MICROS_TOKEN="$MICROS_TOKEN:$PIPELINES_JWT_TOKEN"
            - export MICROS_URL="wss://micros-proxy.services.atlassian.com"
            - docker login -u=sox -p=$PIPELINES_JWT_TOKEN docker-proxy.services.atlassian.com
            # download atlas command
            - curl -fL https://statlas.prod.atl-paas.net/atlas-cli/linux/atlas-latest-linux-amd64.tar.gz | tar -xzp atlas
            - ./atlas plugin install -n micros
            # generate the service descriptor
            - yarn install && yarn gen-sd
            # micros deploy the service
            - ./atlas micros service deploy --service=my-reminders --file=service-descriptor.json --env=ddev
          services:
            - docker
          caches:
            - docker
      - step:
          name: Deploy to prod
          deployment: production
          trigger: manual
          image: node:latest
          script:
            # set up step variables and auth data
            - export DOCKER_URL="docker-proxy.services.atlassian.com"
            - export MICROS_TOKEN="$MICROS_TOKEN:$PIPELINES_JWT_TOKEN"
            - export MICROS_URL="wss://micros-proxy.services.atlassian.com"
            - docker login -u=sox -p=$PIPELINES_JWT_TOKEN docker-proxy.services.atlassian.com
            # download atlas command
            - curl -fL https://statlas.prod.atl-paas.net/atlas-cli/linux/atlas-latest-linux-amd64.tar.gz | tar -xzp atlas
            - ./atlas plugin install -n micros
            # generate the service descriptor
            - yarn install && yarn gen-sd
            # micros deploy the service
            - ./atlas micros service deploy --service=my-reminders --file=service-descriptor.json --env=prod-east
          services:
            - docker
          caches:
            - docker
  custom:
    renovate:
      - step:
          name: Run rennovate bot
          image: renovate/renovate
          script:
            - renovate --platform=bitbucket --username=robertmassaioli atlassianlabs/my-reminders
